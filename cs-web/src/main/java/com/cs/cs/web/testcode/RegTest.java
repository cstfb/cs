package com.cs.cs.web.testcode;

import org.apache.commons.lang.StringUtils;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static java.util.regex.Pattern.CASE_INSENSITIVE;

public class RegTest {
    public static void main(String[] args) {
        String sql = "DROP TABLE `jd_ap_supplier_address_i` /* generated by server */";
        String schema = "jd_finance";
        String table = "jd_ap_supplier_address_i";

        Dao dao = new Dao();


        String tableNameInSqlWithSchema, tableNameInSqlWithoutSchema;
        Matcher tableNameMatcher;
        //用正则表达式取匹配sql中的表名, 不考虑大小写-- 分为sql中有schema和没有schema两个情况
        if ((tableNameMatcher = Pattern.compile("^[\\s\\S]*?(`{0,1}" + schema + "`{0,1}.`{0,1}" + table + "`{0,1})[\\s\\S]*$",
                CASE_INSENSITIVE).matcher(sql)).matches()
                && StringUtils.isNotEmpty(tableNameInSqlWithSchema = tableNameMatcher.group(1))) {
            System.out.println(tableNameInSqlWithSchema);
            sql = sql.replace(tableNameInSqlWithSchema, dao.getTableName());
        } else if ((tableNameMatcher = Pattern.compile("^[\\s\\S]*?(`{0,1}" + table + "`{0,1})[\\s\\S]*$",
                CASE_INSENSITIVE).matcher(sql)).matches()
                && StringUtils.isNotEmpty(tableNameInSqlWithoutSchema = tableNameMatcher.group(1))) {
            System.out.println(tableNameInSqlWithoutSchema);

            sql = sql.replace(tableNameInSqlWithoutSchema, dao.getTableName());
        }

        System.out.println(sql);
    }


}

class Dao{
    String tableName = "bi_chain.JD_AP_SUPPLIER_ADDRESS_I_CHAIN";

    public String getTableName() {
        return tableName;
    }

    public void setTableName(String tableName) {
        this.tableName = tableName;
    }
}