package com.cs.cs.web.testcode;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

public class InterfaceStaticTest {
    public static void main(String[] args) throws Exception {
        String s = "DROP TABLE IF EXISTS bi_chain.erp_inventory_chain /* generated by server */";
        System.out.println(s.toLowerCase().contains("drop table"));
        String b = "CREATE TABLE `erp_inventory` (\n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',\n" +
                "  `creator` int(11) DEFAULT NULL COMMENT '创建人',\n" +
                "  `gmt_create` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n" +
                "  `modifier` int(11) DEFAULT NULL COMMENT '修改人',\n" +
                "  `gmt_modified` timestamp NULL DEFAULT NULL COMMENT '修改时间',";
        System.out.println(b.toLowerCase().contains("create table"));
    }

    public static int add(int a, int b) {
        try {
            return a + b;
        } catch (Exception e) {
            System.out.println("catch 语句块");
        } finally {
            System.out.println("finally 语句块");
        }
        return 0;
    }

    public static boolean ping(String ipAddress, int pingTimes) {
        BufferedReader in = null;
        Runtime r = Runtime.getRuntime();  // 将要执行的ping命令,此命令是windows格式的命令
        String pingCommand = "ping " + ipAddress + " -c " + pingTimes, line;
        Pattern pattern;
        try {
            // 执行命令并获取输出
            // log
            Process p = r.exec(pingCommand);
            if (p == null) {
                return false;
            }
            pattern = Pattern.compile("(TTL=\\d+)", Pattern.CASE_INSENSITIVE);
            // 逐行检查输出,计算类似出现=23ms TTL=62字样的次数
            in = new BufferedReader(new InputStreamReader(p.getInputStream()));
            int connectedCount = 0;

            while ((line = in.readLine()) != null) {
                //log
                connectedCount += (pattern.matcher(line).find() ? 1 : 0);
            }   // 如果出现类似=23ms TTL=62这样的字样,出现的次数=测试次数则返回真
            return connectedCount == pingTimes;
        } catch (Exception ex) {
            //log
            return false;
        } finally {
            try {
                in.close();
            } catch (Exception e) {
            }
        }
    }

    interface it<T>{
        List<T> read();
    }
}
